; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[env]
; https://docs.platformio.org/en/stable/scripting/actions.html

platform = espressif32 @ 4.4.0
;platform = espressif32 @ 5.2.0
board = ttgo-t-watch
framework = arduino
lib_deps = 
	https://github.com/siara-cc/esp32_arduino_sqlite3_lib.git
;	siara-cc/esp32_arduino_sqlite3_lib@^2.3.0
	../TTGO_TWatch_Library_alt/
;	https://github.com/lunokjod/TTGO_TWatch_Library_alt.git
	rpolitex/ArduinoNvs@^2.5
	ricmoo/QRCode@^0.0.1
	arduino-libraries/Arduino_JSON@^0.1.0
	h2zero/NimBLE-Arduino@^1.4.0
	;bodmer/TFT_eSPI @ 2.5.0
;	xinyuan-lilygo/TTGO TWatch Library@^1.4.2
;	crankyoldgit/IRremoteESP8266@^2.8.4
monitor_filters = 
	esp32_exception_decoder
	; time
lib_archive = true
board_build.f_flash = 80000000L
board_build.flash_mode = qio
upload_speed = 2000000
monitor_speed = 115200 ; this value is used in LUNOKIOT_SERIAL calls
check_tool = cppcheck
check_flags = --enable=all
;check_tool = cppcheck ;, clangtidy
;platform_packages = tool-cppcheck
;check_flags = ;--enable=all --skip-packages
extra_scripts = 
	pre:./tool/generateConfig.py
board_build.partitions = ./twatch16MB.csv
board_build.embed_files =  ; @TODO move this to specific hardware/buildmode/version/flavor
;	asset/boot_sound.mp3
	asset/boot_sound_muji.mp3
	;asset/sample_text.txt
	asset/openweathermap_org.pem
	asset/raw_githubusercontent_com.pem
	;asset/screenshoot_sound.mp3
	;asset/server.pem ; fake for local test updates
;	asset/test.raw
build_flags = 
	-DBOARD_HAS_PSRAM
	-mfix-esp32-psram-cache-issue
	; @NOTE is necesary to specify here and embed_files? (redundant)
	; @TODO move this to specific hardware/buildmode/version/flawor :asset/test.raw
	;-DCOMPONENT_EMBED_FILES=asset/boot_sound.mp3:asset/boot_sound_muji.mp3:asset/sample_text.txt:asset/openweathermap_org.pem:asset/raw_githubusercontent_com.pem:asset/screenshoot_sound.mp3:asset/asset/server.pem
	-DCOMPONENT_EMBED_FILES=asset/boot_sound_muji.mp3:asset/sample_text.txt:asset/openweathermap_org.pem:asset/raw_githubusercontent_com.pem
	-DLUNOKIOT_BLE_ENABLED
	-DCONFIG_BT_NIMBLE_PINNED_TO_CORE=1
	;-DCONFIG_BT_NIMBLE_SVC_GAP_APPEARANCE=0x0086
	;-DCONFIG_BT_NIMBLE_SVC_GAP_APPEARANCE=0x00C2
	-DCONFIG_BT_NIMBLE_SVC_GAP_APPEARANCE=0x00C0
	-DLUNOKIOT_WIFI_ENABLED
	;-D EXTERNAL_TFT_ESPI_LIBRARY=1
  	;-D USER_SETUP_LOADED=1
  	;-include /$PROJECT_LIBDEPS_DIR/$PIOENV/TFT_eSPI/User_Setups/Setup25_TTGO_T_Display.h;
	;-include src/UI/ScreenSetup.h
    ;-DST7789_DRIVER=1
    ;-DTFT_WIDTH=240
    ;-DTFT_HEIGHT=240
    ;-DTFT_MISO=-1
    ;-DTFT_MOSI=19
    ;-DTFT_SCLK=18
    ;-DTFT_CS=5
    ;-DTFT_DC=27
    ;-DTFT_RST=-1
    ;-DLOAD_GLCD=1
    ;-DSPI_FREQUENCY=27000000
    ;-DEXTERNAL_TFT_ESPI_LIBRARY
    ;-DLILYGO_WATCH_HAS_DISPLAY
	;-DCONFIG_ENABLE_TOUCH
	;-DLILYGO_WATCH_HAS_TOUCH
;
;
; Specific hardware specific versions and devices must be declared here
[BaseTwatchV1]
lib_deps = ${env.lib_deps}
	earlephilhower/ESP8266Audio@^1.9.7
build_flags = 
		-DLILYGO_WATCH_2020_V1

[BaseTwatchV2]
lib_deps = ${env.lib_deps}
build_flags = 
		-DLILYGO_WATCH_2020_V2

[BaseTwatchV3]
lib_deps = ${env.lib_deps}
	earlephilhower/ESP8266Audio@^1.9.7
build_flags = 
		-DLILYGO_WATCH_2020_V3
		-DLUNOKIOT_BATTERY_CHECK
;
;
;
; Base build must be declared here
[lWatchDebug]
build_type = debug
build_flags = 
	${env.build_flags}
	-DLOG_LOCAL_LEVEL=ESP_LOG_VERBOSE
	-DCORE_DEBUG_LEVEL=0 ; non human-readable data from bootloader hidden
	-DLUNOKIOT_DEBUG_ESP32
	-DLUNOKIOT_SERIAL
	-DLUNOKIOT_SERIAL_SPEED=${env.monitor_speed}
	-DLUNOKIOT_DEBUG
	-DLUNOKIOT_DEBUG_NETWORK
	-DLUNOKIOT_DEBUG_SYSTEM
	-DLUNOKIOT_DEBUG_EVENTS
	-DLUNOKIOT_DEBUG_UI
	-DLUNOKIOT_DEBUG_APPLICATION
	-DLUNOKIOT_UPDATES_ENABLED_NO	  ; for debugging
	-DLUNOKIOT_SCREENSHOOT_ENABLED_NO ; '_NO' are unnecesary, but descriptive :)
	-DLUNOKIOT_LOCAL_CLOUD_ENABLED_NO
	-DLUNOKIOT_UPDATES_LOCAL_URL_NO
	
[lWatchRelease]
build_type = release
build_flags = 
	${env.build_flags}
	-DLUNOKIOT_SCREENSHOOT_ENABLED_NO
	-DLUNOKIOT_LOCAL_CLOUD_ENABLED_NO
	-DLUNOKIOT_UPDATES_ENABLED

[lWatchBLEDebug]
build_type = debug
build_flags = 
	${lWatchDebug.build_flags}
	-DLUNOKIOT_SILENT_BOOT
	-DCONFIG_NIMBLE_CPP_LOG_LEVEL=5
;
;
;
; Final flavor options
[env:Release-twatch2020_V3]
build_type = release
lib_deps = ${BaseTwatchV3.lib_deps}
build_flags = 
	${BaseTwatchV3.build_flags}
	${lWatchRelease.build_flags}

[env:Debug-twatch2020_V3]
build_type = debug
lib_deps = ${BaseTwatchV3.lib_deps}
build_flags = 
	${lWatchDebug.build_flags}
	${BaseTwatchV3.build_flags}
	;-DCONFIG_NIMBLE_CPP_LOG_LEVEL=5 ; @TODO DEBUG BLE

;[env:Debug+UI-twatch2020_V3]
;build_type = debug
;lib_deps = ${BaseTwatchV3.lib_deps}
;build_flags = 
;	${lWatchDebug.build_flags}
;	${BaseTwatchV3.build_flags}
;	-DLUNOKIOT_SILENT_BOOT
;	-DLUNOKIOT_DEBUG_UI_DEEP ; so expensive in responsive terms

;[env:Debug+Sound-twatch2020_V3]
;build_type = debug
;lib_deps = ${BaseTwatchV3.lib_deps}
;build_flags = 
;	${lWatchDebug.build_flags}
;	${BaseTwatchV3.build_flags}

;[env:Debug+BLE-twatch2020_V3]
;build_type = debug
;lib_deps = ${BaseTwatchV3.lib_deps}
;build_flags = 
;	${lWatchBLEDebug.build_flags}
;	-DLUNOKIOT_SILENT_BOOT
;	${BaseTwatchV3.build_flags}

;[env:Debug+Capture-twatch2020_V3]
;build_type = debug
;lib_deps = ${BaseTwatchV3.lib_deps}
;build_flags = 
;	${lWatchCapturesDebug.build_flags}
;	-DLUNOKIOT_SILENT_BOOT_NO
;	${BaseTwatchV3.build_flags}

[env:Release-twatch2020_V2]
build_type = release
lib_deps = ${BaseTwatchV2.lib_deps}
build_flags = 
	${lWatchRelease.build_flags}
	${BaseTwatchV2.build_flags}

[env:Debug-twatch2020_V2]
build_type = debug
lib_deps = ${BaseTwatchV2.lib_deps}
build_flags = 
	${lWatchDebug.build_flags}
	-DLUNOKIOT_SILENT_BOOT
	${BaseTwatchV2.build_flags}

[env:Release-twatch2020_V1]
build_type = release
build_flags = 
	${lWatchRelease.build_flags}
	${BaseTwatchV1.build_flags}
lib_deps = ${BaseTwatchV1.lib_deps}

[env:Debug-twatch2020_V1]
build_type = debug
build_flags = 
	${lWatchDebug.build_flags}
	${BaseTwatchV1.build_flags}
lib_deps = ${BaseTwatchV1.lib_deps}
